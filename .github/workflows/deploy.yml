name: Construction et Push du Docker sur Github

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_and_push:
    name: Construction et push de l'image Docker
    runs-on: ubuntu-latest

    steps:
      - name: Téléchargement du dépôt
        uses: actions/checkout@v3

      - name: Connexion au GCR (Github Container Registry)
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Construction et push de l'image Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  # Le deploy ci-dessous n'a pas été testé par notre groupe car nous avons rencontré des problèmes avec le AZURE_CREDENTIALS.
  # Il semble y avoir un soucis de permissions venant de l'organisation Azure EntraID nous refusant l'accès aux informations du service.
  # L'objet que nous sommes censés avoir pour le AZURE_CREDENTIALS est de cette forme:

  # {
  #   "clientId": "your-client-id",
  #   "clientSecret": "your-client-secret",
  #   "subscriptionId": "your-subscription-id",
  #   "tenantId": "your-tenant-id",
  # }

  # Les données impossibles à récupérer ici sont: clientId et clientSecret.

  deploy:
    name: Déploiement sous Azure
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
        - name: Téléchargement du dépôt
          uses: actions/checkout@v3

        - name: Connexion à Azure
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: Paramétrage de Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.5.6

        - name: Terraform Init
          working-directory: ./infrastructure
          run: terraform init

        - name: Terraform Apply
          working-directory: ./infrastructure
          run: terraform apply -auto-approve -var="docker_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
